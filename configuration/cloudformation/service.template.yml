---
AWSTemplateFormatVersion: 2010-09-09


Parameters:
  ImageRepositoryUri:
    Type: String

  Tag:
    Type: String

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  ServiceTargetGroup:
    Type: String

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  VpcId:
    Type: AWS::EC2::VPC::Id

  DBClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  DBName:
    Type: String

  DBEndpoint:
    Type: String

  DBPasswordSecret:
    Type: String

  DBUsername:
    Type: String

  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id

  EC2InstanceType:
    Type: String
    Default: t4g.small

  EC2Cpu:
    Type: Number
    Default: 2048

  EC2Memory:
    Type: Number
    Default: 1888

  EC2Price:
    Type: Number
    Default: 0.0168


Resources:
  SpringApplicationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/SpringApplicationJson
      SecretString: "{}"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-service-sg
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
      VpcId: !Ref VpcId

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: service.local
      Vpc: !Ref VpcId

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref EC2Role]

  EC2ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SpotPrice: !Ref EC2Price
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${AWS::StackName} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref EC2ContainerInstances
      NewInstancesProtectedFromScaleIn: true
      MinSize: 1
      MaxSize: 1

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EC2AutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 4
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - !Ref EC2CapacityProvider
      ClusterName: !Ref AWS::StackName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      RequiresCompatibilities:
        - EC2
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: primary
          Image: !Sub ${ImageRepositoryUri}:${Tag}
          Cpu: !Ref EC2Cpu
          Memory: !Ref EC2Memory
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: DB_URL
              Value: !Sub postgresql://${DBEndpoint}/${DBName}
            - Name: DB_USER
              Value: !Ref DBUsername
          Secrets:
            - Name: SPRING_APPLICATION_JSON
              ValueFrom: !Ref SpringApplicationSecret
            - Name: DB_PASSWORD
              ValueFrom: !Ref DBPasswordSecret

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Ref DBPasswordSecret
                  - !Ref SpringApplicationSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: primary
      NamespaceId: !Ref PrivateNamespace

  Service:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: !Ref EC2CapacityProvider
          Weight: 1
      Cluster: !Ref Cluster
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
            - !Ref DBClientSecurityGroup
          Subnets: !Ref Subnets
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscovery.Arn
          Port: 80
      LoadBalancers:
        - ContainerName: primary
          ContainerPort: 80
          TargetGroupArn: !Ref ServiceTargetGroup
      HealthCheckGracePeriodSeconds: 180

  EC2AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  EC2AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 1
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt EC2AutoScalingRole.Arn

  EC2AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [!GetAtt Service.Name, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EC2AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
          MetricName: CPUUtilization
          Namespace: AWS/ECS
          Statistic: Average
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 50

Outputs:
  ServicePrivateUrl:
    Value: !Join [".", [!GetAtt ServiceDiscovery.Name, "service.local" ]]
