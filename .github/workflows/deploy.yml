name: Deploy

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
  STACK_NAME: SpringBank

on:
  release:
    types: [ released ]

jobs:
  upload-templates:
    runs-on: ubuntu-latest
    steps:
      - name: Set Tag
        run: echo "TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Templates
        env:
          S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          S3_PREFIX: ${{ env.TAG }}
        run: |
          make -C configuration/cloudformation build

  upload-images:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        run: |
          echo "TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV
          echo "VERSION=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Assemble
        run: ./gradlew assemble

      - name: Push Images
        run: make docker-push

      - name: Logout of Amazon ECR
        if: always()
        run: |
          docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ upload-templates, upload-images ]
    steps:
      - name: Set Environment Variables
        run: |
          echo "TAG=$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        id: configure-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create or Update CloudFormation
        env:
          S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          S3_PREFIX: ${{ env.TAG }}
        timeout-minutes: 18
        run: |
          if ! aws cloudformation describe-stacks --region "$AWS_REGION" --stack-name "$STACK_NAME"; then
            aws cloudformation create-stack \
                    --region "$AWS_REGION" \
                    --stack-name "$STACK_NAME" \
                    --template-url "https://$S3_BUCKET.s3.amazonaws.com/$S3_PREFIX/out.template.yml" \
                    --parameters \
                        "ParameterKey=CertificateArn,ParameterValue=$CERTIFICATE_ARN" \
                        "ParameterKey=DomainName,ParameterValue=$DOMAIN_NAME" \
                        "ParameterKey=HostedZoneId,ParameterValue=$HOSTED_ZONE_ID" \
                        "ParameterKey=ImageRepository,ParameterValue=$ECR_REPOSITORY" \
                        "ParameterKey=Tag,ParameterValue=$TAG" \
                    --capabilities CAPABILITY_NAMED_IAM && \
            aws cloudformation wait stack-create-complete --region "$AWS_REGION" --stack-name "$STACK_NAME"
          else
            aws cloudformation update-stack \
                    --region "$AWS_REGION" \
                    --stack-name "$STACK_NAME" \
                    --template-url "https://$S3_BUCKET.s3.amazonaws.com/$S3_PREFIX/out.template.yml" \
                    --parameters \
                        "ParameterKey=CertificateArn,ParameterValue=$CERTIFICATE_ARN" \
                        "ParameterKey=DomainName,ParameterValue=$DOMAIN_NAME" \
                        "ParameterKey=HostedZoneId,ParameterValue=$HOSTED_ZONE_ID" \
                        "ParameterKey=ImageRepository,ParameterValue=$ECR_REPOSITORY" \
                        "ParameterKey=Tag,ParameterValue=$TAG" \
                    --capabilities CAPABILITY_NAMED_IAM && \
            aws cloudformation wait stack-update-complete --region "$AWS_REGION" --stack-name "$STACK_NAME"
          fi

      - name: Cancel Update If Needed
        if: ${{ failure() || cancelled() }}
        run: |
          aws cloudformation cancel-update-stack --region "$AWS_REGION" --stack-name "$STACK_NAME"
